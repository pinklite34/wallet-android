
def getCheckedOutGitCommitHash() {
    def gitFolder = project.rootDir.getPath() + "/.git/"
    def takeFromHash = 12   // take the first n chars from the commit hash

    /*
     * Simple access to the current commit-hash, without having to rely on a local git installation
     *   (based on https://gist.github.com/JonasGroeger/7620911 )
     *
     *  '.git/HEAD' contains either
     *      in case of detached head: the currently checked out commit hash ("3b3fe8f99d45d48ada83596cee371b21899d97a8")
     *      otherwise: a reference to a file containing the current commit hash  ("ref: refs/heads/master")
     */
    def hash = ""
    try {
        def head = new File(gitFolder + "HEAD").text.split(":") // .git/HEAD
        def isCommit = (head.length == 1)

        if (isCommit) {
            hash = head[0].trim();
        } else {
            def refHead = new File(gitFolder + head[1].trim()) // .git/refs/heads/master
            hash = refHead.text.trim()
        }
    }catch(IOException ex){
        hash = ""
        logger.warn("Unable to detect current git commit hash: {}", ex.toString())
    }

    def version = hash.take(takeFromHash)
    logger.debug("Detected '{}' as git commit hash - using {} as version", hash, version)

    return version
}

def getGitBranch() {
    if (project.hasProperty("branch")) {
        // run gradle with -Pbranch=branchName
        return project.getProperty("branch")
    }

    def gitFolder = project.rootDir.getPath() + "/.git/"

    /*
     * Simple access to the current branch, without having to rely on a local git installation
     *   (based on https://gist.github.com/JonasGroeger/7620911 )
     *
     *  '.git/HEAD' contains either
     *      in case of detached head: the currently checked out commit hash ("3b3fe8f99d45d48ada83596cee371b21899d97a8")
     *      otherwise: a reference to a file containing the current commit hash  ("ref: refs/heads/master")
     */
    def branch = ""
    try {
        def head = new File(gitFolder + "HEAD").text.split(":") // .git/HEAD
        def isDetached = (head.length == 1)

        if (isDetached) {
            logger.warn("Unable to detect current git branch, {}", head)
        } else {
            def refHead = new File(gitFolder + head[1].trim()) // .git/refs/heads/master
            branch = head.last().split("/").last().trim();
        }
    }catch(IOException ex){
        logger.warn("Unable to detect current git branch: {}", ex.toString())
    }

    logger.debug("Detected '{}' as git branch", branch)

    return branch
}

def failIfSigningKeyEnforced() {
    def warning="Couldn't load release signing keys!"
    if (project.hasProperty("enforceReleaseSigning")) {
        throw new GradleException(warning)
    } else {
        logger.warn(warning)
    }
}

// export the functions
ext {
    failIfSigningKeyEnforced = this.&failIfSigningKeyEnforced
    getCheckedOutGitCommitHash = this.&getCheckedOutGitCommitHash
    getGitBranch = this.&getGitBranch
}
-----BEGIN CERTIFICATE-----
MIIB8TCCAVoCCQCg2ZYlANUEvjANBgkqhkiG9w0BAQsFADA9MQswCQYDVQQGEwJV
UzELMAkGA1UECAwCQ0ExITAfBgNVBAoMGEludGVybmV0IFdpZGdpdHMgUHR5IEx0
ZDAeFw0xNDA4MTgyMzE5NDJaFw0xNTA4MTgyMzE5NDJaMD0xCzAJBgNVBAYTAlVT
MQswCQYDVQQIDAJDQTEhMB8GA1UECgwYSW50ZXJuZXQgV2lkZ2l0cyBQdHkgTHRk
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDV4suKtPRyipQJg35O/wIndwm+
5RV+s+jqo8VS7tJ1E4OIsSMo7eVuNU4pLTIqehNN+Skyk/i17y6cPwo2Mff+E6VB
lJrjNLO+rI+B7Ttx7Cs9imoE38Pmv0LKzQbAz8Uz3T6zxXHJpjIWA4PKiw+mO6qw
niEDDutypPa2mB+KjQIDAQABMA0GCSqGSIb3DQEBCwUAA4GBAHUfkcY4wNZZGT3f
oCoB0cNy+gtS86Iu2XU+WzKWxQxvgSiloQ2l0NDsRlw9wBQQZNQOJtPNfTIXkpfU
NoD7qU0Dd0TawoIRAetWzweW0PIJt+Dh7/z7FUTXg5p2IRhOPVNA9+K1wBGfOkEF
6cYkdpr0FmQ52L+Vc1QcNCxwYtWm
-----END CERTIFICATE-----
